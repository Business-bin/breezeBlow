package com.brb.product.controller;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import com.brb.brbcom.common.collections.BrbMap;
import com.brb.brbcom.common.util.RequestParameterUtil;
import com.brb.brbcom.common.util.Util;
import com.brb.product.model.MdVo;
import com.brb.product.model.FwrVo;
import com.brb.product.model.PprtVo;
import com.brb.product.service.ProductService;
/**
 *
 * @author back
 *
 */
@Controller
public class ProductController {

	private static final Logger logger = LoggerFactory.getLogger(ProductController.class);


	@Autowired
	ProductService productService;

	/**
	 * 모델 리스트
	 * @param MdVo
	 * @return ModelAndView
	 * @throws
	 */
	@RequestMapping(value="/product/modelList")
	public ModelAndView modelList(@ModelAttribute MdVo mvo){
		ModelAndView view = new ModelAndView();
		view.addObject("model", productService.getModel());
		view.setViewName("product/modelList");
		return view;
	}

	/**
	 * 모델 검색
	 * @param HttpServletRequest
	 * @return ModelAndView
	 * @throws
	 */
	@SuppressWarnings("rawtypes")
	@RequestMapping(value="/product/modelSearch")
	public ModelAndView modelSearch(HttpServletRequest request){
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> bMap = RequestParameterUtil.getParameterMap(request);
		List infoList = null;
		int rowSize = Util.attrParseInt(bMap, "rows");
		int currentPage = Util.attrParseInt(bMap, "page");
		String sidx = bMap.getString("sidx") == "" ? "MD_SQ" : bMap.getString("sidx");

		if("MD_SQ".equals(sidx)){
			sidx = "MD_SQ";
		}
		String sord = bMap.getString("sord");
	    String orderbyColum = sidx.trim() + "  "+sord;
	    bMap.put("orderBy", orderbyColum);
	    bMap.put("R_PAGE", (currentPage -1) *10 );
	    bMap.put("R_ROW", rowSize);
		int totalcnt = 0;

		//리스트 조회
		infoList = (List)productService.getModelList(bMap).get("modelList");
		//리스트 카운트 조회
		totalcnt = (int)productService.getModelList(bMap).get("totalPage");

		double dSize = Util.attrParseInt(bMap, "rows");
		double liTotalPage = (double)Math.ceil(totalcnt/dSize) ;

		view.addObject("rows", infoList);
		view.addObject("total", liTotalPage);
		view.addObject("page", currentPage);
		view.addObject("records", totalcnt);
		return view;
	}

	/**
	 * 모델 상세
	 * @param MdVo
	 * @return ModelAndView
	 * @throws
	 */
	@RequestMapping(value="/product/modelDet")
	public ModelAndView modelDet(@ModelAttribute MdVo mvo){
		ModelAndView view = new ModelAndView();
		if(mvo.getGubun().equals("det")){
			view.addObject("modelDet", productService.getModelDet(mvo));
		}
		view.addObject("gubun", mvo.getGubun());
		view.setViewName("product/modelDet");
		return view;
	}

	/**
	 * 제품 리스트
	 * @param
	 * @return ModelAndView
	 * @throws
	 */
	@RequestMapping(value="/product/productList")
	public ModelAndView productList(){
		ModelAndView view = new ModelAndView();
		view.setViewName("product/productList");
		return view;
	}

	/**
	 * 제품 검색
	 * @param HttpServletRequest
	 * @return ModelAndView
	 * @throws
	 */
	@SuppressWarnings("rawtypes")
	@RequestMapping(value="/product/productSearch")
	public ModelAndView productSearch(HttpServletRequest request){
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> bMap	= RequestParameterUtil.getParameterMap(request);
		List infoList = null;
		int rowSize = Util.attrParseInt(bMap, "rows");
		int currentPage = Util.attrParseInt(bMap, "page");
		String sidx = bMap.getString("sidx") == "" ? "PPRT_SQ" : bMap.getString("sidx");

		if("PPRT_SQ".equals(sidx)){
			sidx = "PPRT_SQ";
		}
		String sord = bMap.getString("sord");
	    String orderbyColum = sidx.trim() + "  "+sord;
	    bMap.put("orderBy", orderbyColum);
	    bMap.put("R_PAGE", (currentPage -1) *10 );
	    bMap.put("R_ROW", rowSize);
		int totalcnt = 0;

		//리스트 조회
		infoList = (List)productService.getProdList(bMap).get("prodList");
		//리스트 카운트 조회
		totalcnt = (int)productService.getProdList(bMap).get("totalPage");

		double dSize = Util.attrParseInt(bMap, "rows");
		double liTotalPage = (double)Math.ceil(totalcnt/dSize) ;

		view.addObject("rows", infoList);
		view.addObject("total", liTotalPage);
		view.addObject("page", currentPage);
		view.addObject("records", totalcnt);
		return view;
	}

	/**
	 * 제품 상세
	 * @param PprtVo
	 * @return ModelAndView
	 * @throws
	 */
	@RequestMapping(value="/product/productDet")
	public ModelAndView productDet(@ModelAttribute PprtVo pvo){
		ModelAndView view = new ModelAndView();
		view.addObject("prodDet", productService.getProdDet(pvo));
		view.addObject("code", productService.getCode());
		view.addObject("gubun", pvo.getGubun());
		view.setViewName("product/productDet");
		return view;
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	@RequestMapping(value="/product/macSearch")
	public ModelAndView macSearch(HttpServletRequest request){
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> bMap	= RequestParameterUtil.getParameterMap(request);
		BrbMap<Object, Object> adminMap = null;
		List infoList = null;
		int rowSize = Util.attrParseInt(bMap, "rows");
		int currentPage = Util.attrParseInt(bMap, "page");
		String sidx = bMap.getString("sidx") == "" ? "MD_SQ" : bMap.getString("sidx");

		if("MD_SQ".equals(sidx)){
			sidx = "MD_SQ";
		}
		String sord = bMap.getString("sord");
	    String orderbyColum = sidx.trim() + "  "+sord;
	    bMap.put("orderBy", orderbyColum);
	    bMap.put("R_PAGE", (currentPage -1) *rowSize );
	    bMap.put("R_ROW", rowSize);
		int totalcnt = 0;

		//리스트 조회
		infoList = (List)productService.getMacList(bMap).get("macList");
		//리스트 카운트 조회
		totalcnt = (int)productService.getMacList(bMap).get("totalPage");

		double dSize = Util.attrParseInt(bMap, "rows");
		double liTotalPage = (double)Math.ceil(totalcnt/dSize) ;

		if(infoList.size()>0) {
			for(int i=0; i<infoList.size(); i++) {
				adminMap = (BrbMap<Object, Object>) infoList.get(i);
				adminMap.put("ROWNUM", (currentPage -1) *rowSize+i+1);
			}
		}

		view.addObject("rows", infoList);
		view.addObject("total", liTotalPage);
		view.addObject("page", currentPage);
		view.addObject("records", totalcnt);
		return view;
	}

	/**
	 * 제품 등록
	 * @param MdVo, HttpSession
	 * @return
	 * @throws
	 */
	@RequestMapping(value="/product/insertProduct")
	public void insertProduct(@ModelAttribute MdVo mvo, HttpSession session){
		/*Calendar calendar = Calendar.getInstance();
        Date date = calendar.getTime();
        String today = (new SimpleDateFormat("yyyyMMddHHmmss").format(date));
		try{
			BufferedOutputStream bos = null;
	    	String fileName = mvo.getProdFile().getOriginalFilename();
	    	mvo.setCpOrgImageNm(fileName);
	    	byte[] bytes = mvo.getProdFile().getBytes();
	    	String saveFileName = getExtension(fileName, today);
	    	mvo.setCpChImageNm(saveFileName);
	    	String savePath = "C:\\work\\" + saveFileName;
    		bos = new BufferedOutputStream(new FileOutputStream(savePath));
    		bos.write(bytes);
    		bos.flush();
	    	bos.close();
	    } catch (Exception e){
	    	logger.debug("imgUpload Fail, error : "+e);
	    } finally{
	    	logger.debug("File Upload Success!!");
	    }
		mvo.setRegAdmSq(Integer.parseInt((String)session.getAttribute("ADM_SQ")));
		productService.insertProduct(mvo);*/
	}

	/**
	 * 제품 수정
	 * @param MdVo, HttpSession
	 * @return
	 * @throws
	 */
	@RequestMapping(value="/product/updateProduct")
	public void updateProduct(@ModelAttribute MdVo mvo, HttpSession session){
		/*Calendar calendar = Calendar.getInstance();
        Date date = calendar.getTime();
        String today = (new SimpleDateFormat("yyyyMMddHHmmss").format(date));
		try{
			File file = new File("C:\\work\\"+mvo.getCpChImageNm());
			if(file.exists()){
				if(file.delete()){
					logger.debug(mvo.getCpChImageNm()+"File Delete Success!!");
				}else{
					logger.debug(mvo.getCpChImageNm()+"File Delete Fail!!");
				}
			}else{
				logger.debug(mvo.getCpChImageNm()+"No File!!");
			}

			BufferedOutputStream bos = null;
	    	String fileName = mvo.getProdFile().getOriginalFilename();
	    	mvo.setCpOrgImageNm(fileName);
	    	byte[] bytes = mvo.getProdFile().getBytes();
	    	String saveFileName = getExtension(fileName, today);
	    	mvo.setCpChImageNm(saveFileName);
	    	String savePath = "C:\\work\\" + saveFileName;
    		bos = new BufferedOutputStream(new FileOutputStream(savePath));
    		bos.write(bytes);
    		bos.flush();
	    	bos.close();
	    } catch (Exception e){
	    	logger.debug("ImgUpload Fail, error : "+e);
	    } finally{
	    	logger.debug("File Upload Success!!");
	    }
		mvo.setUptAdmSq(Integer.parseInt((String)session.getAttribute("ADM_SQ")));
		productService.updateProduct(mvo);*/
	}

	/**
	 * 펌웨어 리스트
	 * @param
	 * @return ModelAndView
	 * @throws
	 */
	@RequestMapping(value="/product/fwrList")
	public ModelAndView fwrList(){
		ModelAndView view = new ModelAndView();
		view.setViewName("product/fwrList");
		return view;
	}

	/**
	 * 펌웨어 검색
	 * @param HttpServletRequest
	 * @return ModelAndView
	 * @throws
	 */
	@SuppressWarnings("rawtypes")
	@RequestMapping(value="/product/fwrSearch")
	public ModelAndView fwrSearch(HttpServletRequest request){
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> bMap	= RequestParameterUtil.getParameterMap(request);
		List infoList = null;
		int rowSize = Util.attrParseInt(bMap, "rows");
		int currentPage = Util.attrParseInt(bMap, "page");
		String sidx = bMap.getString("sidx") == "" ? "FWR_SQ" : bMap.getString("sidx");

		if("FWR_SQ".equals(sidx)){
			sidx = "FWR_SQ";
		}
		String sord = bMap.getString("sord");
	    String orderbyColum = sidx.trim() + "  "+sord;
	    bMap.put("orderBy", orderbyColum);
	    bMap.put("R_PAGE", (currentPage -1) *10 );
	    bMap.put("R_ROW", rowSize);
		int totalcnt = 0;

		//리스트 조회
		infoList = (List)productService.getFwrList(bMap).get("fwrList");
		//리스트 카운트 조회
		totalcnt = (int)productService.getFwrList(bMap).get("totalPage");

		double dSize = Util.attrParseInt(bMap, "rows");
		double liTotalPage = (double)Math.ceil(totalcnt/dSize) ;

		view.addObject("rows", infoList);
		view.addObject("total", liTotalPage);
		view.addObject("page", currentPage);
		view.addObject("records", totalcnt);
		return view;
	}

	/**
	 * 펌웨어 상세
	 * @param FwrVo
	 * @return ModelAndView
	 * @throws
	 */
	@RequestMapping(value="/product/fwrDet")
	public ModelAndView fwrDet(@ModelAttribute FwrVo fvo){
		ModelAndView view = new ModelAndView();
		view.addObject("fwrDet", productService.getFwrDet(fvo));
		view.addObject("gubun", fvo.getGubun());
		view.setViewName("product/fwrDet");
		return view;
	}

	@ResponseBody
	@RequestMapping(value="/product/insertFwr")
	public ModelAndView insertFwr(@ModelAttribute FwrVo fvo, HttpSession session){
		ModelAndView view = new ModelAndView();
		fvo.setRegAdmSq((Integer.parseInt((String)session.getAttribute("ADM_SQ"))));
		productService.insertFwr(fvo);
		return view;
	}


/////////////////////////////////////////////////////////////////////////////////////////////////////





	@RequestMapping(value="/product/excelUpload")
	public ModelAndView excelUpload(){
		ModelAndView view = new ModelAndView();
		view.setViewName("product/excelUpload");
		return view;
	}

	@RequestMapping(value="/product/excelUploadFile", method = RequestMethod.POST)
	public void excelUploadFile(MultipartHttpServletRequest request){
		List<MultipartFile> mpf = request.getFiles("imgFile");
		String [] oriName = new String[mpf.size()];
		String today = "";
		for(int i=0; i<mpf.size(); i++){
			oriName[i] = mpf.get(i).getOriginalFilename();
		}
		String excelType = request.getParameter("excelType");
		if(excelType.equals("xlsx")){
			today = productService.xlsxExcelReader(request, oriName);
		}else if(excelType.equals("xls")){
			today = productService.xlsExcelReader(request, oriName);
		}
		try{
			BufferedOutputStream bos = null;
	    	for(int i=0; i<mpf.size(); i++){
		    	String fileName = mpf.get(i).getOriginalFilename();
		    	byte[] bytes = mpf.get(i).getBytes();
		    	String saveFileName = getExtension(fileName, today);
		    	String savePath = "C:\\work\\" + saveFileName;
	    		bos = new BufferedOutputStream(new FileOutputStream(savePath));
	    		bos.write(bytes);
	    		bos.flush();
	    	}
	    	bos.close();
	    } catch (Exception e){
	    	logger.debug("Excel Upload Fail!!");
	    }
	}

	/**
	 * getExtension
	 * @param fileName
	 * @return
	 */
	public String getExtension(String fileName, String today){
	    int dotPosition = fileName.lastIndexOf('.');
	    if ((-1 != dotPosition) && (fileName.length() - 1 > dotPosition)) {
	    	return fileName.substring(0, dotPosition)+today+"."+fileName.substring(dotPosition + 1);
	    }
	    return "";
	}

	@RequestMapping(value="/product/csvUpload")
	public ModelAndView csvUpload(){
		ModelAndView view = new ModelAndView();
		view.setViewName("product/csvUpload");
		return view;
	}

	@RequestMapping(value="/product/csvUploadFile")
	public ModelAndView csvUploadFile(MultipartHttpServletRequest request, HttpSession session) throws IOException{
		ModelAndView view = new ModelAndView();
		MultipartFile file = request.getFile("csv");
		BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(new File("C:\\"+file.getOriginalFilename())),"UTF8"));
		String [] temp;
		String s;
		MdVo mvo;
		ArrayList<MdVo> ar = new ArrayList<MdVo>();
		br.readLine();
		while((s = br.readLine()) != null){
			mvo = new MdVo();
			temp = s.split(",");
			mvo.setMdSq(Integer.parseInt(temp[0]));
			mvo.setCpNm(temp[1]);
			mvo.setCpDes(temp[2]);
			mvo.setCpDetSpec(temp[3]);
			mvo.setCpOrgImageNm(temp[4]);
			mvo.setCpChImageNm(temp[5]);
			mvo.setCpOrgThumNm(temp[6]);
			mvo.setCpChThumNm(temp[7]);
			mvo.setSalNum(Integer.parseInt(temp[8]));
			mvo.setStat(temp[9]);
			mvo.setRegAdmSq(Integer.parseInt((String)session.getAttribute("ADM_SQ")));
			ar.add(mvo);
		}
		for(int i=0; i<ar.size(); i++){
			productService.insertProduct(ar.get(i));
		}
		br.close();
		view.setViewName("product/csvUpload");
		return view;
	}

}

package com.brb.sms.controller;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.URL;
import java.net.URLConnection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.brb.brbcom.common.collections.BrbMap;
import com.brb.brbcom.common.util.ApplicationContextHolder;
import com.brb.brbcom.common.util.RequestParameterUtil;
import com.brb.brbcom.common.util.Util;
import com.brb.brbcom.foundation.property.PropertyService;
import com.brb.sms.service.SmsService;

/**
 * 
 * @author back
 *
 */
@Controller
public class SmsController {
	
	protected PropertyService propertyService;
	
	@SuppressWarnings("unused")
	private static final Logger logger = LoggerFactory.getLogger(SmsController.class);
	
	
	@Autowired
	SmsService smsService;
	
	@RequestMapping(value = "sms/smsList" )
	public ModelAndView smslist(HttpServletRequest request, HttpServletResponse response, ModelMap modelMap)throws Exception{
		ModelAndView view = new ModelAndView();
		view.setViewName("sms/smsList") ;
		return view;
	}
	
	 
	@RequestMapping(value = "sms/smsListSearch" , method = RequestMethod.POST)
	public ModelAndView smsListSearch(HttpServletRequest request, HttpServletResponse response, ModelMap modelMap)throws Exception{
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		Map infoMap = new HashMap<String, String>();
		List infoList = null;
		
		int rowSize = Util.attrParseInt(dMap, "rows");
		int currentPage = Util.attrParseInt(dMap, "page");
		currentPage = 1;
		String sidx = dMap.getString("sidx") == "" ? "SMS_SQ" : dMap.getString("sidx");
		
		if("SMS_SQ".equals(sidx)){
			sidx = "SMS_SQ";
		}
		String sord = dMap.getString("sord");
	    String orderbyColum = sidx.trim() + "  "+sord;
	    
	    dMap.put("orderBy", orderbyColum);
	  	dMap.put("R_PAGE", currentPage -1 );
	  	dMap.put("R_ROW", rowSize);
	  	
		int totalcnt = 0;
		
		infoList = smsService.getSmsList(dMap);
		infoMap = smsService.getSmsListTotal(dMap);
		int liTotalPage = 0;
		if(null != infoMap ){
			liTotalPage = (int)Math.ceil(Integer.parseInt(infoMap.get("total").toString())/rowSize);
		}
		view.addObject("rows", infoList);
		view.addObject("total", liTotalPage);
		view.addObject("page", currentPage);
		view.addObject("records", totalcnt);	
		return view;
	}
	
	@RequestMapping("sms/sms")
	public ModelAndView smsSend() {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("sms/sms") ;
		return mav;
	}
	
	/**
	 *  
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "sms/sendsms" , method = RequestMethod.POST)
	public @ResponseBody Map<Object, Object> sedsms(HttpServletRequest request) throws Exception {
		Map<Object, Object> infoMap = new HashMap<Object, Object>();
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		propertyService = (PropertyService)ApplicationContextHolder.getContext().getBean("propertiesService");
		String smsId     = propertyService.getString("SMS_ID");
		String smsPw     = propertyService.getString("SMS_PW");
		
		StringBuffer response = new StringBuffer();
		
		try {
			String url = "http://www.munja123.com/Remote/RemoteSms.html";
			URL obj = new URL(url);
			URLConnection conn = obj.openConnection();
			String param1="senko";
			String param2="hagood74";
			
			String urlParameters = "remote_id=" + param1 +"&remote_pass=" + param2+"&remote_num=" + "1"
					+"&remote_reserve="+"0"+"&remote_phone="+"01042233619"+"&remote_name="+"홍길동"
					+"&remote_subject="+""+"&remote_callback="+"01054094926"+"&remote_msg="+"테스트"
					+"&remote_returnurl=";
			

	        // POST 값 전송일 경우 true
	        conn.setDoOutput(true);
	        OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
	        // 파라미터를 wr에 넣어주고 flush
	        wr.write(urlParameters);
	        wr.flush();
	    
	        // in에 readLine이 null이 아닐때까지 StringBuffer에 append
			BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
			String inputLine;			
	
			while ((inputLine = in.readLine()) != null) {
				response.append(inputLine);
			}
			in.close();
	        wr.close();
	    } catch (Exception e) {
	    	e.printStackTrace();
	    }

		//response
		//0000|전송 성공|1|6496|||||||1520483032
        //infoMap.put("list", listMap);
		return infoMap;
	}
}

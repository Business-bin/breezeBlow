package com.brb.common.controller;

import java.util.Date;
import java.util.Map;
import java.util.Properties;

import javax.mail.Message;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.brb.brbcom.common.collections.BrbMap;
import com.brb.brbcom.common.util.ApplicationContextHolder;
import com.brb.brbcom.common.util.RequestParameterUtil;
import com.brb.brbcom.foundation.property.PropertyService;
import com.brb.common.service.CommonService;

/**
 * 
 * @author back
 *
 */
@Controller
public class CommonController {
	protected PropertyService propertyService;
	String host     = "";
	String user   = "";
	String password  =  "";
	String port  =  "";
	Properties props = new Properties();
	
	public CommonController(){
		propertyService = (PropertyService)ApplicationContextHolder.getContext().getBean("propertiesService");
		this.host     = propertyService.getString("MAIL_STMP_HOST");
		this.user   = propertyService.getString("MAIL_USER");
		this.password  =  propertyService.getString("MAIL_PW");
		this.port  =  propertyService.getString("MAIL_STMP_PORT");
		
		props.put("mail.smtp.host", host);
		props.put("mail.smtp.starttls.enable", "true");
		props.put("mail.smtp.auth", "true");
		props.put("mail.smtp.port", port);
		
	}
	
	
	@SuppressWarnings("unused")
	private static final Logger logger = LoggerFactory.getLogger(CommonController.class);
	
	@Autowired
	CommonService commonService;
	
	@RequestMapping("common/jusoPopup")
	public ModelAndView juso() {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("common/jusoPopup") ;
		return mav;
	}
	
	/**
	 * 메일 전송
	 * R_ADM_EMAIL : test@test.mail
	 * R_AS_STAT : 머시기머시기  접수 완료 
	 * @param request
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings({"unused", "unchecked" })
	@RequestMapping(value = "common/sendEmail" , method = RequestMethod.POST)
	public  @ResponseBody Map<Object, Object>  sendEmail(HttpServletRequest request) throws Exception {
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		BrbMap<Object, Object> rMap =  new BrbMap<>();
		
		String emailTo     = dMap.getString("R_ADM_EMAIL");
		String asStat	   = dMap.getString("R_AS_STAT");
		try {
			Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {
			   protected PasswordAuthentication getPasswordAuthentication() {
			    return new PasswordAuthentication(user, password);
			   }
			});
			
			MimeMessage message = new MimeMessage(session);
		    message.setFrom(new InternetAddress(user));
		    message.addRecipient(Message.RecipientType.TO, new InternetAddress(emailTo));
		    message.setSubject("AS 상태 발송 메일");
		    message.setSentDate(new Date());
		    message.setHeader("Content-Type", "text/plain; charset=euc-kr");
		    Multipart multipart = new MimeMultipart();
	        
	        MimeBodyPart htmlPart = new MimeBodyPart();
	        StringBuffer sb = new StringBuffer();
			sb.append("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");
			sb.append("<html xmlns=\"http://www.w3.org/1999/xhtml\">");
			sb.append("<head>");
			sb.append("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />");
			sb.append("</head>");
			sb.append("<body bgcolor='#FFFFFF'>");
			sb.append("<table style='width:100%; height:50px;'   bgcolor='#999999'><tr><td></td></tr></table>");
			sb.append("<table><tr><td></td><td  bgcolor='#FFFFFF'><div><table><tr><td><h3>AS 접수 상태 메일 </h3>");
			sb.append("<h3 style='color:blue;'>");
			sb.append(asStat);
			sb.append("</h3>");
			sb.append("<p style='color:red;'> * AS 접수 상태 메일 입니다.</p></td></tr></table></div></td><td></td></tr></table>");
			sb.append("<table style='width:100%; height:50px;'   bgcolor='#999999'><tr><td></td></tr></table>");
			sb.append("</body>");
			sb.append("</html>");
			
	        htmlPart.setContent(sb.toString(), "text/html; charset=EUC-KR");
	        multipart.addBodyPart(htmlPart);
	        message.setContent(multipart);
		    
		    Transport.send(message);
		} catch (Exception e){
			rMap.put("mailYn", "N");
			e.printStackTrace();
		}
	    rMap.put("mailYn", "Y");
		return rMap;
	}
}

package com.brb.board.controller;

import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.brb.board.service.BoardService;
import com.brb.brbcom.common.collections.BrbMap;
import com.brb.brbcom.common.util.RequestParameterUtil;
/**
 * 
 * @author back
 *
 */
@Controller
public class BoardController {
	
	@SuppressWarnings("unused")
	private static final Logger logger = LoggerFactory.getLogger(BoardController.class);
	
	
	@Autowired
	BoardService boardService;

	
	/**
	 * 관리자 목록 페이지 호출
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("board/noticeList")
	public ModelAndView noticeList() {
		logger.debug("##########################  noticeList  ##########################");
		ModelAndView mav = new ModelAndView();
		mav.setViewName("board/noticeList") ;
		return mav;
	}
		
	
	/**
	 * 공지사항 목록 조회
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "board/noticeListProc" , method = RequestMethod.POST)
	public ModelAndView noticeListProc(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		logger.debug("############   noticeListProc  ################");
		ModelAndView view = new ModelAndView("board/noticeList");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		int page = Integer.parseInt(dMap.get("page").toString());
		int page_cnt = Integer.parseInt(dMap.get("page_cnt").toString());
		int begin_index = (page-1)* page_cnt;
		dMap.put("begin_index", begin_index);
		dMap.put("page_cnt", page_cnt);
		dMap.put("page", page);
		dMap.put("sch_flag", "Y");

		BrbMap<Object, Object> rMap = null;
		BrbMap<Object, Object> cntMap = null;
		BrbMap<Object, Object> noticeMap = null;
		try{
			rMap = boardService.getNoticeList(dMap);
			cntMap = boardService.getNoticeListCnt(dMap);
			
		} catch(Exception e){
			e.printStackTrace();
		}
		
		noticeMap = (BrbMap<Object, Object>)cntMap.get("noticeListCnt");
		int total_cnt = Integer.parseInt(noticeMap.get("CNT").toString());
		int total_page = (total_cnt-1)/page_cnt+1;
		logger.debug("total_page>>>>>>>>>>>"+total_page);
		dMap.put("total_page", total_page);
		
		int virtualNumber = total_cnt - begin_index;
		List list = (List) rMap.get("noticeList");
		if(list.size()>0) {
			for(int i=0; i<list.size(); i++) {
				noticeMap = (BrbMap<Object, Object>) list.get(i);
				noticeMap.put("ROWNUM", virtualNumber--);
			}
		}

		view.addObject("rMap", rMap);
		view.addObject("dMap", dMap);

		return view;
	}
	
	/**
	 * 관리자 신규생성 페이지 호출
	 * @param param
	 * @return
	 * @throws Exception
	 */	
	@RequestMapping("board/noticeAdd")
	public ModelAndView noticeAdd() {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("board/noticeAdd") ;
		return mav;
	}	
	
	/**
	 * 관리자 신규생성
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "board/noticeAddProc" , method = RequestMethod.POST)
	public ModelAndView noticeAddProc(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		logger.debug("############   noticeAddProc   ################");
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		
		HttpSession session = request.getSession(false);
		String bd_user_email = session.getAttribute("ADM_EMAIL").toString();
		String bd_user_nm = session.getAttribute("ADM_NM").toString();
		String bd_user_hp = session.getAttribute("ADM_HP").toString();
		String bd_ip = session.getAttribute("LOCALIP").toString();
		String bd_os = session.getAttribute("OSNAME").toString();
		String reg_adm_sq = session.getAttribute("ADM_SQ").toString();
		String btbs_sq = session.getAttribute("ADM_EMAIL").toString();
		
		dMap.put("bd_user_email", bd_user_email);
		dMap.put("bd_user_nm", bd_user_nm);
		dMap.put("bd_user_hp", bd_user_hp);
		dMap.put("bd_ip", bd_ip);
		dMap.put("bd_os", bd_os);
		dMap.put("reg_adm_sq", reg_adm_sq);
		dMap.put("btbs_sq", btbs_sq);
		
		int cnt = 0;
		try{
			cnt = boardService.addNotice(dMap);
		} catch(Exception e){
			e.printStackTrace();
		}
		view.addObject("cnt", cnt);
		
		return view;
	
	}	
	
	/**
	 * 상세보기 화면
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "board/noticeView" , method = RequestMethod.POST)
	public ModelAndView noticeView(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		logger.debug("############   noticeView  ################");
		ModelAndView view = new ModelAndView("board/noticeView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		BrbMap<Object, Object> rMap = null;
		try{
			rMap = boardService.getNotice(dMap);
		} catch(Exception e){
			e.printStackTrace();
		}

		view.addObject("rMap", rMap);

		return view;
	}	
	
	/**
	 * 관리자 수정
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "board/noticeViewProc" , method = RequestMethod.POST)
	public ModelAndView noticeViewProc(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		logger.debug("############   noticeViewProc  ################");
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		
		HttpSession session = request.getSession(false);
		String upt_adm_sq = session.getAttribute("ADM_SQ").toString();
		dMap.put("upt_adm_sq", upt_adm_sq); //수정 관리자고유번호
		
		int cnt = 0;
		try{
			cnt = boardService.modNotice(dMap);
		} catch(Exception e){
			e.printStackTrace();
		}

		view.addObject("cnt", cnt);

		return view;
	}	
	
	/**
	 * 관리자 삭제 팝업 호출
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "board/noticeDel" , method = RequestMethod.GET)
	public ModelAndView noticeDel(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		logger.debug("############   noticeDel  ################");
		ModelAndView view = new ModelAndView("board/noticeDel");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		view.addObject("dMap", dMap);

		return view;
	}	
	
	/**
	 * 공지사항 삭제
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "board/noticeDelProc" , method = RequestMethod.POST)
	public ModelAndView noticeDelProc(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		logger.debug("############   noticeDelProc  ################");
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		
		HttpSession session = request.getSession(false);
		String del_adm_sq = session.getAttribute("ADM_SQ").toString();
		dMap.put("del_user_sq", del_adm_sq); //삭제 관리자고유번호
		
		int cnt = 0;
		try{
			cnt = boardService.delNotice(dMap);
		} catch(Exception e){
			e.printStackTrace();
		}

		view.addObject("cnt", cnt);
		
		return view;
	}

/***************************************************************************************************************************/	
/***************************************************************************************************************************/
/***************************************************************************************************************************/	
/***************************************************************************************************************************/
	
	/**
	 * Q&A 목록 페이지 호출
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("board/qnaList")
	public ModelAndView qnaList() {
		logger.debug("##########################  qnaList  ##########################");
		ModelAndView mav = new ModelAndView();
		mav.setViewName("board/qnaList") ;
		return mav;
	}
		
	
	/**
	 * Q&A 목록 조회
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "board/qnaListProc" , method = RequestMethod.POST)
	public ModelAndView qnaListProc(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		logger.debug("############   qnaListProc  ################");
		ModelAndView view = new ModelAndView("board/qnaList");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		int page = Integer.parseInt(dMap.get("page").toString());
		int page_cnt = Integer.parseInt(dMap.get("page_cnt").toString());
		int begin_index = (page-1)* page_cnt;
		dMap.put("begin_index", begin_index);
		dMap.put("page_cnt", page_cnt);
		dMap.put("page", page);
		dMap.put("sch_flag", "Y");

		BrbMap<Object, Object> rMap = null;
		BrbMap<Object, Object> cntMap = null;
		BrbMap<Object, Object> noticeMap = null;
		try{
			rMap = boardService.getQnaList(dMap);
			cntMap = boardService.getQnaListCnt(dMap);
			
		} catch(Exception e){
			e.printStackTrace();
		}
		
		noticeMap = (BrbMap<Object, Object>)cntMap.get("qnaListCnt");
		int total_cnt = Integer.parseInt(noticeMap.get("CNT").toString());
		int total_page = (total_cnt-1)/page_cnt+1;
		logger.debug("total_page>>>>>>>>>>>"+total_page);
		dMap.put("total_page", total_page);
		
		int virtualNumber = total_cnt - begin_index;
		List list = (List) rMap.get("qnaList");
		if(list.size()>0) {
			for(int i=0; i<list.size(); i++) {
				noticeMap = (BrbMap<Object, Object>) list.get(i);
				noticeMap.put("ROWNUM", virtualNumber--);
			}
		}

		view.addObject("rMap", rMap);
		view.addObject("dMap", dMap);

		return view;
	}
	
	/**
	 * Q&A 신규생성 페이지 호출
	 * @param param
	 * @return
	 * @throws Exception
	 */	
	@RequestMapping("board/qnaAdd")
	public ModelAndView qnaAdd() {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("board/qnaAdd") ;
		return mav;
	}	
	
	/**
	 * Q&A 신규생성
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "board/qnaAddProc" , method = RequestMethod.POST)
	public ModelAndView qnaAddProc(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		logger.debug("############   qnaAddProc   ################");
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		
		HttpSession session = request.getSession(false);
		String bd_user_email = session.getAttribute("ADM_EMAIL").toString();
		String bd_user_nm = session.getAttribute("ADM_NM").toString();
		String bd_user_hp = session.getAttribute("ADM_HP").toString();
		String bd_ip = session.getAttribute("LOCALIP").toString();
		String bd_os = session.getAttribute("OSNAME").toString();
		String reg_adm_sq = session.getAttribute("ADM_SQ").toString();
		String btbs_sq = session.getAttribute("ADM_EMAIL").toString();
		
		dMap.put("bd_user_email", bd_user_email);
		dMap.put("bd_user_nm", bd_user_nm);
		dMap.put("bd_user_hp", bd_user_hp);
		dMap.put("bd_ip", bd_ip);
		dMap.put("bd_os", bd_os);
		dMap.put("reg_adm_sq", reg_adm_sq);
		dMap.put("btbs_sq", btbs_sq);
		
		int cnt = 0;
		try{
			cnt = boardService.addQna(dMap);
		} catch(Exception e){
			e.printStackTrace();
		}
		view.addObject("cnt", cnt);
		
		return view;
	
	}	
	
	/**
	 * Q&A 상세보기 화면
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "board/qnaView" , method = RequestMethod.POST)
	public ModelAndView qnaView(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		logger.debug("############   qnaView  ################");
		ModelAndView view = new ModelAndView("board/qnaView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		BrbMap<Object, Object> rMap = null;
		BrbMap<Object, Object> qMap = null;
		try{
			rMap = boardService.getQna(dMap);
		} catch(Exception e){
			e.printStackTrace();
		}
		
		List list = (List)rMap.get("qna");
		qMap = (BrbMap<Object, Object>)list.get(0);
		view.addObject("rMap", rMap);
		view.addObject("qMap", qMap);

		return view;
	}	
	
	/**
	 * Q&A 답변달기
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "board/qnaViewProc" , method = RequestMethod.POST)
	public ModelAndView qnaViewProc(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		logger.debug("############   qnaViewProc  ################");
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		
		HttpSession session = request.getSession(false);
		String bd_user_email = session.getAttribute("ADM_EMAIL").toString();
		String bd_user_nm = session.getAttribute("ADM_NM").toString();
		String bd_user_hp = session.getAttribute("ADM_HP").toString();
		String bd_ip = session.getAttribute("LOCALIP").toString();
		String bd_os = session.getAttribute("OSNAME").toString();
		String reg_adm_sq = session.getAttribute("ADM_SQ").toString();
		String btbs_sq = session.getAttribute("ADM_EMAIL").toString();
		
		dMap.put("bd_user_email", bd_user_email);
		dMap.put("bd_user_nm", bd_user_nm);
		dMap.put("bd_user_hp", bd_user_hp);
		dMap.put("bd_ip", bd_ip);
		dMap.put("bd_os", bd_os);
		dMap.put("reg_adm_sq", reg_adm_sq);
		dMap.put("btbs_sq", btbs_sq);


		int cnt = 0;
		try{
			cnt = boardService.qnaReply(dMap); // 답변달기, 상세테이블에 insert
			cnt = boardService.modQna(dMap);   // 메인테이블 업데이트
		} catch(Exception e){
			e.printStackTrace();
		}

		view.addObject("cnt", cnt);

		return view;
	}	
	
	/**
	 * Q&A 삭제 팝업 호출
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "board/qnaDel" , method = RequestMethod.GET)
	public ModelAndView qnaDel(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		logger.debug("############   qnaDel  ################");
		ModelAndView view = new ModelAndView("board/qnaDel");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		view.addObject("dMap", dMap);

		return view;
	}	
	
	/**
	 * Q&A 삭제
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "board/qnaDelProc" , method = RequestMethod.POST)
	public ModelAndView qnaDelProc(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		logger.debug("############   qnaDelProc  ################");
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		
		HttpSession session = request.getSession(false);
		String del_adm_sq = session.getAttribute("ADM_SQ").toString();
		dMap.put("del_adm_sq", del_adm_sq); //삭제 관리자고유번호
		
		int cnt = 0;
		try{
			cnt = boardService.delQna(dMap);
		} catch(Exception e){
			e.printStackTrace();
		}

		view.addObject("cnt", cnt);
		
		return view;
	}	

/***************************************************************************************************************************/	
/***************************************************************************************************************************/
/***************************************************************************************************************************/	
/***************************************************************************************************************************/

	/**
	 * FAQ 목록 페이지 호출
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("board/faqList")
	public ModelAndView faqList() {
		logger.debug("##########################  faqList  ##########################");
		ModelAndView mav = new ModelAndView();
		mav.setViewName("board/faqList") ;
		return mav;
	}
		
	
	/**
	 * FAQ 목록 조회
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "board/faqListProc" , method = RequestMethod.POST)
	public ModelAndView faqListProc(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		logger.debug("############   faqListProc  ################");
		ModelAndView view = new ModelAndView("board/faqList");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		int page = Integer.parseInt(dMap.get("page").toString());
		int page_cnt = Integer.parseInt(dMap.get("page_cnt").toString());
		int begin_index = (page-1)* page_cnt;
		dMap.put("begin_index", begin_index);
		dMap.put("page_cnt", page_cnt);
		dMap.put("page", page);
		dMap.put("sch_flag", "Y");

		BrbMap<Object, Object> rMap = null;
		BrbMap<Object, Object> cntMap = null;
		BrbMap<Object, Object> noticeMap = null;
		try{
			rMap = boardService.getFaqList(dMap);
			cntMap = boardService.getFaqListCnt(dMap);
			
		} catch(Exception e){
			e.printStackTrace();
		}
		
		noticeMap = (BrbMap<Object, Object>)cntMap.get("faqListCnt");
		int total_cnt = Integer.parseInt(noticeMap.get("CNT").toString());
		int total_page = (total_cnt-1)/page_cnt+1;
		logger.debug("total_page>>>>>>>>>>>"+total_page);
		dMap.put("total_page", total_page);
		
		int virtualNumber = total_cnt - begin_index;
		List list = (List) rMap.get("faqList");
		if(list.size()>0) {
			for(int i=0; i<list.size(); i++) {
				noticeMap = (BrbMap<Object, Object>) list.get(i);
				noticeMap.put("ROWNUM", virtualNumber--);
			}
		}

		view.addObject("rMap", rMap);
		view.addObject("dMap", dMap);

		return view;
	}
	
	/**
	 * FAQ 신규생성 페이지 호출
	 * @param param
	 * @return
	 * @throws Exception
	 */	
	@RequestMapping("board/faqAdd")
	public ModelAndView faqAdd() {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("board/faqAdd") ;
		return mav;
	}	
	
	/**
	 * FAQ 신규생성
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "board/faqAddProc" , method = RequestMethod.POST)
	public ModelAndView faqAddProc(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		logger.debug("############   faqAddProc   ################");
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		
		HttpSession session = request.getSession(false);
		String bd_user_email = session.getAttribute("ADM_EMAIL").toString();
		String bd_user_nm = session.getAttribute("ADM_NM").toString();
		String bd_user_hp = session.getAttribute("ADM_HP").toString();
		String bd_ip = session.getAttribute("LOCALIP").toString();
		String bd_os = session.getAttribute("OSNAME").toString();
		String reg_adm_sq = session.getAttribute("ADM_SQ").toString();
		String btbs_sq = session.getAttribute("ADM_EMAIL").toString();
		
		dMap.put("bd_user_email", bd_user_email);
		dMap.put("bd_user_nm", bd_user_nm);
		dMap.put("bd_user_hp", bd_user_hp);
		dMap.put("bd_ip", bd_ip);
		dMap.put("bd_os", bd_os);
		dMap.put("reg_adm_sq", reg_adm_sq);
		dMap.put("btbs_sq", btbs_sq);
		
		int cnt = 0;
		try{
			cnt = boardService.addFaq(dMap);
		} catch(Exception e){
			e.printStackTrace();
		}
		view.addObject("cnt", cnt);
		
		return view;
	
	}	
	
	/**
	 * FAQ 상세보기 화면
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "board/faqView" , method = RequestMethod.POST)
	public ModelAndView faqView(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		logger.debug("############   faqView  ################");
		ModelAndView view = new ModelAndView("board/faqView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		BrbMap<Object, Object> rMap = null;
		try{
			rMap = boardService.getFaq(dMap);
		} catch(Exception e){
			e.printStackTrace();
		}

		view.addObject("rMap", rMap);

		return view;
	}	
	
	/**
	 * FAQ 수정
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "board/faqViewProc" , method = RequestMethod.POST)
	public ModelAndView faqViewProc(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		logger.debug("############   faqViewProc  ################");
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		
		HttpSession session = request.getSession(false);
		String upt_adm_sq = session.getAttribute("ADM_SQ").toString();
		dMap.put("upt_adm_sq", upt_adm_sq); //수정 관리자고유번호
		
		int cnt = 0;
		try{
			cnt = boardService.modFaq(dMap);
		} catch(Exception e){
			e.printStackTrace();
		}

		view.addObject("cnt", cnt);

		return view;
	}	
	
	/**
	 * FAQ 삭제 팝업 호출
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "board/faqDel" , method = RequestMethod.GET)
	public ModelAndView faqDel(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		logger.debug("############   faqDel  ################");
		ModelAndView view = new ModelAndView("board/faqDel");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		view.addObject("dMap", dMap);

		return view;
	}	
	
	/**
	 * FAQ 삭제
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "board/faqDelProc" , method = RequestMethod.POST)
	public ModelAndView faqDelProc(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		logger.debug("############   faqDelProc  ################");
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		
		HttpSession session = request.getSession(false);
		String del_user_sq = session.getAttribute("ADM_SQ").toString();
		dMap.put("del_user_sq", del_user_sq); //삭제 관리자고유번호
		
		int cnt = 0;
		try{
			cnt = boardService.delFaq(dMap);
		} catch(Exception e){
			e.printStackTrace();
		}

		view.addObject("cnt", cnt);
		
		return view;
	}	

}

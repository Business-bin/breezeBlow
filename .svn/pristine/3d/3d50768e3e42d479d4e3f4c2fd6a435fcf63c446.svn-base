package com.brb.login.controller;

import java.util.Locale;
import java.util.Map;
import java.util.Properties;

import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.brb.brbcom.common.collections.BrbMap;
import com.brb.brbcom.common.util.AES256Util;
import com.brb.brbcom.common.util.ApplicationContextHolder;
import com.brb.brbcom.common.util.RequestParameterUtil;
import com.brb.brbcom.common.util.Util;
import com.brb.brbcom.foundation.property.PropertyService;
import com.brb.common.service.CommonService;
import com.brb.login.service.LoginService;

/**
 * 
 * @author back
 *
 */
@Controller
public class LoginController {
	
	protected PropertyService propertyService;
	
	@SuppressWarnings("unused")
	private static final Logger logger = LoggerFactory.getLogger(LoginController.class);
	
	@Autowired
	CommonService commonService;
	
	
	@Autowired
	LoginService loginService;
	
	private static AES256Util aes256 = AES256Util.getInstance();
	
	@RequestMapping("/")
	public ModelAndView loginInit() {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("login/login") ;
		return mav;
	}
	
	/**
	 *  로그인
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings({"unchecked", "unused" })
	@RequestMapping(value = "login/login" , method = RequestMethod.POST)
	public @ResponseBody Map<Object, Object>  login(HttpServletRequest request) throws Exception {
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		dMap.put("R_ADM_PWD",aes256.aesEncode(dMap.getString("R_ADM_PWD")));
		BrbMap<Object, Object> rMap = null;
		try{
			rMap = loginService.getUser(dMap);
			if(null != rMap && rMap.getString("USERCHECK").equals("Y")){
				
				HttpSession session = request.getSession();
				session.setAttribute("ADM_SQ",rMap.getString("ADM_SQ") );
				session.setAttribute("USERCHECK","Y");
				session.setAttribute("ADM_NM",rMap.getString("ADM_NM") );
				session.setAttribute("ADM_SQ",rMap.getString("ADM_SQ") );
				session.setAttribute("ADM_EMAIL",rMap.getString("ADM_EMAIL") );
				session.setAttribute("ADM_HP",rMap.getString("ADM_HP") );
				session.setAttribute("ADM_TEL",rMap.getString("ADM_TEL") );
				session.setAttribute("ADM_RANK",rMap.getString("ADM_RANK") );
				session.setAttribute("REG_ADM_NM",rMap.getString("REG_ADM_NM") );
				session.setAttribute("ADM_CLASS",rMap.getString("ADM_CLASS") );
				session.setAttribute("BTBS_SQ",rMap.getString("BTBS_SQ") );
				session.setAttribute("BTBS_NM",rMap.getString("BTBS_NM") );
 			    session.setMaxInactiveInterval(60*60);
 			    
 			   
 			    //action log
 			    String url = request.getScheme () + "://" + request.getServerName () + ":" + request.getServerPort ()+request.getRequestURI();
 			    BrbMap<Object, Object> logMap = new BrbMap<>();
 			    logMap.put("R_ADM_EMAIL", rMap.getString("ADM_EMAIL"));
 			    logMap.put("R_ADM_NM", rMap.getString("ADM_NM"));
 			    logMap.put("R_CON_ENV", System.getProperty("os.name").toLowerCase(Locale.ROOT) + " : " + Util.getBrowser(request));
  			    logMap.put("R_IP", Util.getLocalServerIp());
  			    logMap.put("R_STAT", "0");  			    
  			    
  			    commonService.addAdminLog(logMap);
 			    
			} else {
				rMap = new BrbMap<>();
				rMap.put("USERCHECK", "N");
			}
		} catch(Exception e){
			e.printStackTrace();
		}
		return rMap;
	}
	
	
	
	/**
	 * 로그아웃 
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings({ "unused", "unchecked" })
	@RequestMapping(value = "login/logout" , method = RequestMethod.POST)
	public @ResponseBody Map<Object, Object>  logout(HttpServletRequest request) throws Exception {
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		 //세션무효화
		HttpSession session = request.getSession();
		
	    BrbMap<Object, Object> logMap = new BrbMap<>();
	    //action log
	 /*   logMap.put("R_ADM_EMAIL", session.getAttribute("ADM_EMAIL"));
	    logMap.put("R_CON_ENV", System.getProperty("os.name").toLowerCase(Locale.ROOT) + " : " + Util.getBrowser(request));
	    logMap.put("R_IP", Util.getLocalServerIp());
	    logMap.put("R_STAT", "0");  			    
	    commonService.addAdminLog(logMap);*/
	    
	    session.invalidate();
		BrbMap<Object, Object> rMap = new BrbMap<>();
		rMap.put("status", "Y");
		return rMap;
	}
	
	
	/**
	 *  임시패스워드 메일전송
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings({"unchecked", "unused" })
	@RequestMapping(value = "login/passSend" , method = RequestMethod.POST)
	public   @ResponseBody Map<Object, Object>  passSend(HttpServletRequest request) throws Exception {
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		BrbMap<Object, Object> rMap = null;
		try{
			//유저 체크 
			rMap = loginService.getCheckUser(dMap);
			
			if(null == rMap){
				rMap = new BrbMap<>();
				rMap.put("status", "N");
				rMap.put("message", "등록된 메일 ID가 아닙니다.");
				return rMap;
			} else {
				propertyService = (PropertyService)ApplicationContextHolder.getContext().getBean("propertiesService");
				String host     = propertyService.getString("MAIL_STMP_HOST");
				final String user   = propertyService.getString("MAIL_USER");
				final String password  =  propertyService.getString("MAIL_PW");
				String to     = dMap.getString("R_SADM_EMAIL");

				Properties props = new Properties();
				props.put("mail.smtp.host", host);
				props.put("mail.smtp.auth", "true");

				Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {
				   protected PasswordAuthentication getPasswordAuthentication() {
				    return new PasswordAuthentication(user, password);
				   }
				});
				
				String imsiPw = randomPw();
				dMap.put("R_SADM_PWD",aes256.aesEncode(imsiPw));
				
				//임시비밀번호 저장
				int p = loginService.modPassword(dMap);
				
				if(p >  0){
					rMap.put("status", "Y");
				}
				MimeMessage message = new MimeMessage(session);
			    message.setFrom(new InternetAddress(user));
			    message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));
			    // Subject
			    message.setSubject("임시 비밀번호 메일");
			    // Text
			    message.setText("귀하에 임시 번호 : " + imsiPw);
			    // send the message
			    Transport.send(message);
			}
			   
		} catch(Exception e){
			e.printStackTrace();
		}
		return rMap;
	}
	
	/**
	 * 랜덤 패스워드 생성
	 * @return
	 */
	public static String randomPw(){
		//배열에 선언 
		char pwCollection[] = new char[] { 
                        '1','2','3','4','5','6','7','8','9','0', 
                        'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z', 
                        'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z', 
                        /*'!','@','#','$','%','^','&','*','(',')'*/
                        };

		String ranPw = ""; 
		for (int i = 0; i < 10; i++) { 
			//Math.rondom()은 0.0이상 1.0미만의 난수를 생성해 준다. 
			int selectRandomPw = (int)(Math.random()*(pwCollection.length));
			ranPw += pwCollection[selectRandomPw]; 
		} 
      return ranPw; 
	} 
}

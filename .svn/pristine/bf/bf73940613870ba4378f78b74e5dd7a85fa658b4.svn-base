package com.brb.member.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.brb.brbcom.common.collections.BrbMap;
import com.brb.brbcom.common.util.RequestParameterUtil;
import com.brb.brbcom.common.util.Util;
import com.brb.member.model.MemVo;
import com.brb.member.service.MemService;
/**
 *
 * @author back
 *
 */
@Controller
public class MemController {

	@SuppressWarnings("unused")
	private static final Logger logger = LoggerFactory.getLogger(MemController.class);


	@Autowired
	MemService memService;

	/**
	 * 회원 리스트
	 * @param MemVo
	 * @return ModelAndView
	 * @throws Exception
	 */
	@RequestMapping(value = "mem/memList")
	public ModelAndView memList(@ModelAttribute MemVo bvo){
		ModelAndView view = new ModelAndView();
		view.addObject("btbsList", memService.getBtbsList());
		view.addObject("sidoList", memService.getSidoList());
		view.setViewName("mem/memList");
		return view;
	}

	@SuppressWarnings("rawtypes")
	@RequestMapping(value = "mem/memSearch")
	public ModelAndView memTable(HttpServletRequest request, HttpServletResponse response, ModelMap modelMap) throws Exception{
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> bMap	= RequestParameterUtil.getParameterMap(request);
		List infoList = null;
		int rowSize = Util.attrParseInt(bMap, "rows");
		int currentPage = Util.attrParseInt(bMap, "page");
		String sidx = bMap.getString("sidx") == "" ? "MEM_SQ" : bMap.getString("sidx");

		if("MEM_SQ".equals(sidx)){
			sidx = "MEM_SQ";
		}
		String sord = bMap.getString("sord");
	    String orderbyColum = sidx.trim() + "  "+sord;
	    bMap.put("orderBy", orderbyColum);
	    bMap.put("R_PAGE", (currentPage -1) *10 );
	    bMap.put("R_ROW", rowSize);
		int totalcnt = 0;

		//리스트 조회
		infoList = (List)memService.getMemList(bMap).get("memList");
		//리스트 카운트 조회
		totalcnt = (int)memService.getMemList(bMap).get("totalPage");

		double dSize = Util.attrParseInt(bMap, "rows");
		double liTotalPage = (double)Math.ceil(totalcnt/dSize) ;

		view.addObject("rows", infoList);
		view.addObject("total", liTotalPage);
		view.addObject("page", currentPage);
		view.addObject("records", totalcnt);
		return view;
	}

	/**
	 * 회원 상세
	 * @param MemVo
	 * @return ModelAndView
	 * @throws Exception
	 */
	@RequestMapping(value = "mem/memDet")
	public ModelAndView memDet(@ModelAttribute MemVo bvo, HttpSession session){
		ModelAndView view = new ModelAndView();
		if(bvo.getMemSq() != null && bvo.getMemSq() != 0){
			view.addObject("mem", memService.getMem(bvo));
		}
		view.addObject("admEmail", session.getAttribute("ADM_EMAIL"));
		view.addObject("hpList", memService.getHpList().get("hpList"));
		view.setViewName("mem/memDet");
		return view;
	}

	/**
	 * 회원 수정
	 * @param MemVo
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "mem/updateMem")
	public void updateMem(@ModelAttribute MemVo bvo){
		memService.updateMem(bvo);
	}

	/**
	 * 회원 삭제(논리)
	 * @param MemVo
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "mem/deleteMem")
	public void deleteMem(@ModelAttribute MemVo bvo){
		memService.deleteMem(bvo);
	}

	/**
	 * 회원 활동로그
	 * @param String
	 * @return String
	 * @throws Exception
	 */
	@RequestMapping(value = "mem/memLog")
	public ModelAndView memLog(@ModelAttribute MemVo bvo) throws Exception{
		ModelAndView view = new ModelAndView();
		view.addObject("memData", memService.getMem(bvo));
        view.setViewName("mem/memLog");
        return view;
    }

	/**
	 * 회원 활동로그 검색
	 * @param String
	 * @return String
	 * @throws Exception
	 */
	@RequestMapping(value = "mem/searchLog")
	public ModelAndView searchLog(HttpServletRequest request, HttpServletResponse response, ModelMap modelMap) throws Exception{
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> bMap	= RequestParameterUtil.getParameterMap(request);
		List infoList = null;
		int rowSize = Util.attrParseInt(bMap, "rows");
		int currentPage = Util.attrParseInt(bMap, "page");
		String sidx = bMap.getString("sidx") == "" ? "LOG_USER_SQ" : bMap.getString("sidx");

		if("LOG_USER_SQ".equals(sidx)){
			sidx = "LOG_USER_SQ";
		}
		String sord = bMap.getString("sord");
	    String orderbyColum = sidx.trim() + "  "+sord;
	    bMap.put("orderBy", orderbyColum);
	    bMap.put("R_PAGE", (currentPage -1) *10 );
	    bMap.put("R_ROW", rowSize);
		int totalcnt = 0;

		//리스트 조회
		infoList = (List)memService.getLogList(bMap).get("logList");
		//리스트 카운트 조회
		totalcnt = (int)memService.getLogList(bMap).get("totalPage");

		double dSize = Util.attrParseInt(bMap, "rows");
		double liTotalPage = (double)Math.ceil(totalcnt/dSize) ;

		view.addObject("rows", infoList);
		view.addObject("total", liTotalPage);
		view.addObject("page", currentPage);
		view.addObject("records", totalcnt);
		return view;
    }
}

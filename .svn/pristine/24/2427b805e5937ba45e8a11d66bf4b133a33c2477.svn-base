package com.brb.btb.controller;

import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.brb.btb.service.BtbService;
import com.brb.common.service.CommonService;
import com.brb.brbcom.common.collections.BrbMap;
import com.brb.brbcom.common.util.AES256Util;
import com.brb.brbcom.common.util.RequestParameterUtil;
import com.brb.brbcom.common.util.Util;
/**
 * 
 * @author back
 *
 */
@Controller
public class BtbController {
	
	@SuppressWarnings("unused")
	private static final Logger logger = LoggerFactory.getLogger(BtbController.class);
	
	
	@Autowired
	BtbService btbService;
	
	@Autowired
	CommonService commonService;
	
	private static AES256Util aes256 = AES256Util.getInstance();

	
	/**
	 * B2B사이트 목록 페이지 호출
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("btb/btbList")
	public ModelAndView btbList() {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("btb/btbList") ;
		return mav;
	}
	
	
	/**
	 * B2B사이트 목록 조회
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "btb/btbListProc" , method = RequestMethod.POST)
	public ModelAndView btbListProc(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		Map infoMap = new HashMap<String, String>();
		BrbMap<Object, Object> adminMap = null;
		List infoList = null;
		
		int rowSize = Util.attrParseInt(dMap, "rows");
		int currentPage = Util.attrParseInt(dMap, "page");
		String sidx = dMap.getString("sidx") == "" ? "REG_DTTM" : dMap.getString("sidx");
		
		if("REG_DTTM".equals(sidx)){
			sidx = "REG_DTTM";
		}
		String sord = dMap.getString("sord");
	    String orderbyColum = sidx.trim() + "  "+sord;
	    dMap.put("orderBy", orderbyColum);
	  	dMap.put("R_PAGE", (currentPage -1) *rowSize );
	  	dMap.put("R_ROW", rowSize);
		dMap.put("start_dt", dMap.getString("start_dt").replaceAll("-", ""));
		dMap.put("end_dt", dMap.getString("end_dt").replaceAll("-", ""));
		int totalcnt = 0;
		
		//리스트 조회
		infoList = btbService.getBtbList(dMap);
		
		//리스트 카운트 조회
		infoMap = btbService.getBtbListCnt(dMap);
		
		
		if(null != infoMap ){
			totalcnt  = Integer.parseInt(infoMap.get("CNT").toString());
		}
		double dSize = Util.attrParseInt(dMap, "rows");
		double liTotalPage = (double)Math.ceil(totalcnt/dSize) ;
		
		int begin_index = (currentPage-1)* rowSize;
		int virtualNumber = totalcnt - begin_index;
		if(infoList.size()>0) {
			for(int i=0; i<infoList.size(); i++) {
				adminMap = (BrbMap<Object, Object>) infoList.get(i);
				adminMap.put("ROWNUM", virtualNumber--);
			}
		}
		
		
		view.addObject("rows", infoList);
		view.addObject("total", liTotalPage);
		view.addObject("page", currentPage);
		view.addObject("records", totalcnt);	
		return view;

	}
	
	/**
	 * BTB 사이트 신규추가 페이지 호출
	 * @param param
	 * @return
	 * @throws Exception
	 */	
	@RequestMapping("btb/btbAdd")
	public ModelAndView btbAdd() {
		ModelAndView mav = new ModelAndView();
		List<BrbMap> hpList = null;
		List<BrbMap> templList = null;
		try{
			templList = btbService.getTemplList();
			hpList = btbService.getHpTelList();
			
		} catch(Exception e){
			e.printStackTrace();
		}
		
		mav.setViewName("btb/btbAdd") ;
		mav.addObject("hpList", hpList);
		mav.addObject("templList", templList);
		return mav;
	}	
	
	/**
	 * B2B사이트 신규생성
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "btb/btbAddProc" , method = RequestMethod.POST)
	public ModelAndView btbAddProc(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		
		HttpSession session = request.getSession(false);
		String reg_adm_sq = session.getAttribute("ADM_SQ").toString();
		dMap.put("reg_adm_sq", reg_adm_sq); //등록 관리자고유번호
		
		int cnt = 0;
		try{
			cnt = btbService.addBtb(dMap);
		} catch(Exception e){
			e.printStackTrace();
		}
		view.addObject("cnt", cnt);
		
		return view;
	
	}	
	
	/**
	 * B2B사이트 상세보기 화면
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "btb/btbView" , method = RequestMethod.POST)
	public ModelAndView btbView(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		ModelAndView view = new ModelAndView("btb/btbView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		BrbMap<Object, Object> rMap = null;
		List<BrbMap> hpList = null;
		List<BrbMap> templList = null;
		try{
			rMap = btbService.getBtb(dMap);
			hpList = btbService.getHpTelList();
			templList = btbService.getTemplList();
		} catch(Exception e){
			e.printStackTrace();
		}

		view.addObject("rMap", rMap);
		view.addObject("hpList", hpList);
		view.addObject("templList", templList);

		return view;
	}	
	
	/**
	 * B2B사이트 수정
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "btb/btbViewProc" , method = RequestMethod.POST)
	public ModelAndView btbViewProc(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		dMap.put("upt_adm_sq", 111); //수정 관리자고유번호
		int cnt = 0;
		try{
			cnt = btbService.modBtb(dMap);
		} catch(Exception e){
			e.printStackTrace();
		}

		view.addObject("cnt", cnt);

		return view;
	}	
	
	/**
	 * B2B사이트 삭제
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "btb/btbDelProc" , method = RequestMethod.POST)
	public ModelAndView btbDelProc(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		
		HttpSession session = request.getSession(false);
		String reg_adm_sq = session.getAttribute("ADM_SQ").toString();
		String reg_adm_email = session.getAttribute("ADM_EMAIL").toString();
		dMap.put("del_adm_sq", reg_adm_sq); //삭제 관리자고유번호
		dMap.put("del_adm_email", reg_adm_email);
		int cnt = 0;
		try{
			cnt = btbService.delBtb(dMap);
		} catch(Exception e){
			e.printStackTrace();
		}

		view.addObject("cnt", cnt);
		
		return view;
	}
	
	/**
	 * B2B사이트 사용중지
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "btb/goStop" , method = RequestMethod.POST)
	public ModelAndView goStop(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		
		HttpSession session = request.getSession(false);
		String reg_adm_sq = session.getAttribute("ADM_SQ").toString();
		dMap.put("adm_sq", reg_adm_sq); //관리자고유번호
		
		int cnt = 0;
		try{
			cnt = btbService.goStop(dMap);
		} catch(Exception e){
			e.printStackTrace();
		}

		view.addObject("cnt", cnt);
		
		return view;
	}	
	
	/**
	 * B2B사이트 사용중지 해제
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "btb/goUse" , method = RequestMethod.POST)
	public ModelAndView goUse(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		
		HttpSession session = request.getSession(false);
		String reg_adm_sq = session.getAttribute("ADM_SQ").toString();
		dMap.put("adm_sq", reg_adm_sq); //관리자고유번호
		
		int cnt = 0;
		try{
			cnt = btbService.goUse(dMap);
		} catch(Exception e){
			e.printStackTrace();
		}

		view.addObject("cnt", cnt);
		
		return view;
	}	
	/**
	 * B2B 관리자 목록 페이지 호출
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("btb/btbAdminList")
	public ModelAndView btbAdminList() {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("btb/btbAdminList") ;
		return mav;
	}	
	

	/**
	 * B2B 관리자 목록 조회
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "btb/btbAdminListProc" , method = RequestMethod.POST)
	public ModelAndView btbAdminListProc(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		Map infoMap = new HashMap<String, String>();
		BrbMap<Object, Object> adminMap = null;
		List infoList = null;
		
		HttpSession session = request.getSession(false);
		String btbs_sq = session.getAttribute("BTBS_SQ").toString();
		dMap.put("btbs_sq", btbs_sq);
		
		int rowSize = Util.attrParseInt(dMap, "rows");
		int currentPage = Util.attrParseInt(dMap, "page");
		String sidx = dMap.getString("sidx") == "" ? "REG_DTTM" : dMap.getString("sidx");
		
		if("REG_DTTM".equals(sidx)){
			sidx = "REG_DTTM";
		}
		String sord = dMap.getString("sord");
	    String orderbyColum = sidx.trim() + "  "+sord;
	    dMap.put("orderBy", orderbyColum);
	  	dMap.put("R_PAGE", (currentPage -1) *10 );
	  	dMap.put("R_ROW", rowSize);
		dMap.put("start_dt", dMap.getString("start_dt").replaceAll("-", ""));
		dMap.put("end_dt", dMap.getString("end_dt").replaceAll("-", ""));
		int totalcnt = 0;
		
		//리스트 조회
		infoList = btbService.getAdminList(dMap);;
		
		//리스트 카운트 조회
		infoMap = btbService.getAdminListCnt(dMap);
		
		if(null != infoMap ){
			totalcnt  = Integer.parseInt(infoMap.get("CNT").toString());
		}
		double dSize = Util.attrParseInt(dMap, "rows");
		double liTotalPage = (double)Math.ceil(totalcnt/dSize) ;
		
		int begin_index = (currentPage-1)* rowSize;
		int virtualNumber = totalcnt - begin_index;
		if(infoList.size()>0) {
			for(int i=0; i<infoList.size(); i++) {
				adminMap = (BrbMap<Object, Object>) infoList.get(i);
				adminMap.put("ROWNUM", virtualNumber--);
			}
		}
		
		
		view.addObject("rows", infoList);
		view.addObject("total", liTotalPage);
		view.addObject("page", currentPage);
		view.addObject("records", totalcnt);	
		return view;

	}
	
	/**
	 * B2B 관리자 활동로그 페이지 호출
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("btb/btbAdminLogList")
	public ModelAndView adminLogList() {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("btb/btbAdminLogList") ;
		return mav;
	}		
	
	/**
	 * 관리자 활동로그 조회
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "btb/btbAdminLogListProc" , method = RequestMethod.POST)
	public ModelAndView adminLogListProc(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		Map infoMap = new HashMap<String, String>();
		BrbMap<Object, Object> adminMap = null;
		List infoList = null;
		int rowSize = Util.attrParseInt(dMap, "rows");
		int currentPage = Util.attrParseInt(dMap, "page");
		String sidx = dMap.getString("sidx") == "" ? "DTTM" : dMap.getString("sidx");
		
		if("DTTM".equals(sidx)){
			sidx = "DTTM";
		}
		String sord = dMap.getString("sord");
	    String orderbyColum = sidx.trim() + "  "+sord;
	    dMap.put("orderBy", orderbyColum);
	  	dMap.put("R_PAGE", (currentPage -1) *rowSize );
	  	dMap.put("R_ROW", rowSize);
		dMap.put("start_dt", dMap.getString("start_dt").replaceAll("-", ""));
		dMap.put("end_dt", dMap.getString("end_dt").replaceAll("-", ""));
		dMap.put("sch_flag", "Y");
		int totalcnt = 0;
		
		//리스트 조회
		infoList = btbService.getAdminLogList(dMap);
		
		//리스트 카운트 조회
		infoMap = btbService.getAdminLogListCnt(dMap);
		

		
		if(null != infoMap ){
			totalcnt  = Integer.parseInt(infoMap.get("CNT").toString());
		}
		double dSize = Util.attrParseInt(dMap, "rows");
		double liTotalPage = (double)Math.ceil(totalcnt/dSize) ;
		
		int begin_index = (currentPage-1)* rowSize;
		int virtualNumber = totalcnt - begin_index;
		if(infoList.size()>0) {
			for(int i=0; i<infoList.size(); i++) {
				adminMap = (BrbMap<Object, Object>) infoList.get(i);
				adminMap.put("ROWNUM", virtualNumber--);
			}
		}
		
		
		view.addObject("rows", infoList);
		view.addObject("total", liTotalPage);
		view.addObject("page", currentPage);
		view.addObject("records", totalcnt);	
		return view;
	}	
	
	/**
	 * B2B 관리자 신규생성 페이지 호출
	 * @param param
	 * @return
	 * @throws Exception
	 */	
	@RequestMapping("btb/btbAdminAdd")
	public ModelAndView adminAdd() {
		ModelAndView mav = new ModelAndView();
		
		List<BrbMap> hpList = null;
		List<BrbMap> telList = null;
		List btbNmList = null;
		
		try{
			btbNmList = btbService.getBtbNmList();
			hpList = commonService.getHpList();
			telList = commonService.getTelList();
		} catch(Exception e){
			e.printStackTrace();
		}

		mav.setViewName("btb/btbAdminAdd") ;
		mav.addObject("hpList", hpList);
		mav.addObject("telList", telList);
		mav.addObject("btbNmList", btbNmList);
		
		return mav;
		
	}		
	
	/**
	 * B2B 관리자 신규생성
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "btb/btbAdminAddProc" , method = RequestMethod.POST)
	public ModelAndView btbAdminAddProc(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		dMap.put("adm_pwd",aes256.aesEncode(dMap.getString("adm_pwd")));
		
		HttpSession session = request.getSession(false);
		String reg_adm_nm = session.getAttribute("ADM_NM").toString();
		String reg_adm_sq = session.getAttribute("ADM_SQ").toString();
		
		/* 다음  항목 확인필요*/
		dMap.put("reg_adm_nm", reg_adm_nm); //등록 관리자명
		dMap.put("reg_adm_sq", reg_adm_sq); //등록 관리자고유번호
		
		int cnt = 0;
		try{
			cnt = btbService.addAdmin(dMap);
		} catch(Exception e){
			e.printStackTrace();
		}
		view.addObject("cnt", cnt);
		
		return view;
	
	}	
	
	/**
	 * B2B 관리자 상세보기 화면
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "btb/btbAdminView" , method = RequestMethod.POST)
	public ModelAndView btbAdminView(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		ModelAndView view = new ModelAndView("btb/btbAdminView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		BrbMap<Object, Object> rMap = null;
		List<BrbMap> hpList = null;
		List<BrbMap> telList = null;
		try{
			rMap = btbService.getAdmin(dMap);
			hpList = commonService.getHpList();
			telList = commonService.getTelList();
		} catch(Exception e){
			e.printStackTrace();
		}

		view.addObject("rMap", rMap);
		view.addObject("hpList", hpList);
		view.addObject("telList", telList);

		return view;
	}	
	
	/**
	 * B2B 관리자  수정
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "btb/btbAdminViewProc" , method = RequestMethod.POST)
	public ModelAndView btbAdminViewProc(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		
		HttpSession session = request.getSession(false);
		String reg_adm_sq = session.getAttribute("ADM_SQ").toString();
		dMap.put("upt_adm_sq", reg_adm_sq); //수정 관리자고유번호
		
		int cnt = 0;
		try{
			cnt = btbService.modAdmin(dMap);
		} catch(Exception e){
			e.printStackTrace();
		}

		view.addObject("cnt", cnt);

		return view;
	}	
		
	
	/**
	 * B2B 관리자 삭제
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "btb/btbAdminDelProc" , method = RequestMethod.POST)
	public ModelAndView btbAdminDelProc(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		
		HttpSession session = request.getSession(false);
		String reg_adm_sq = session.getAttribute("ADM_SQ").toString();
		String reg_adm_email = session.getAttribute("ADM_SQ").toString();
		
		dMap.put("del_adm_sq", reg_adm_sq); //삭제 관리자고유번호
		dMap.put("del_adm_email", reg_adm_email); 
		
		int cnt = 0;
		try{
			cnt = btbService.delAdmin(dMap);
		} catch(Exception e){
			e.printStackTrace();
		}

		view.addObject("cnt", cnt);
		
		return view;
	}	
	
	/**
	 * B2B 사이트명 중복체크
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "btb/checkBtbNm" , method = RequestMethod.POST)
	public ModelAndView checkBtbNm(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		BrbMap<Object, Object> rMap = null;
		
		String useYn ="";
		try{
			rMap = btbService.checkBtbNm(dMap);
		} catch(Exception e){
			e.printStackTrace();
		}

		useYn = rMap.get("USE_YN").toString();
		view.addObject("useYn", useYn);
		view.addObject("checkYn", "Y");
		
		return view;
	}	
	
	
	/**
	 * B2B 관리자 이용정지
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "btb/goAdminStop" , method = RequestMethod.POST)
	public ModelAndView goAdminStop(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		
		int cnt=0;
		try{
			cnt = btbService.goAdminStop(dMap);
		} catch(Exception e){
			e.printStackTrace();
		}

		view.addObject("cnt", cnt);
		
		return view;
	}	
	
	/**
	 * B2B 관리자 이용정지 해제
	 * @param param
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "btb/goAdminUse" , method = RequestMethod.POST)
	public ModelAndView goAdminUse(HttpServletRequest request,
			HttpServletResponse response,
			ModelMap modelMap) throws Exception {
		
		ModelAndView view = new ModelAndView("jsonView");
		BrbMap<Object, Object> dMap	= RequestParameterUtil.getParameterMap(request);
		
		int cnt=0;
		try{
			cnt = btbService.goAdminUse(dMap);
		} catch(Exception e){
			e.printStackTrace();
		}

		view.addObject("cnt", cnt);
		
		return view;
	}	


}

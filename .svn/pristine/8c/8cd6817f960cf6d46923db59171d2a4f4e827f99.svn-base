package com.brb.app.dao;

import java.util.List;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Repository;

import com.brb.app.model.PolyVo;
import com.brb.brbcom.common.collections.BrbMap;

@Repository("AppDao")
public class AppDao{

	@Autowired
	@Resource(name="sqlSessionTemplate")
	private SqlSession queryM;

	@Autowired
	@Resource(name="sqlSessionTemplate_s")
	private SqlSession queryS;


	@SuppressWarnings("unused")
	private static final Logger logger = LoggerFactory.getLogger(AppDao.class);

	/**
	 *
	 * @param BrbMap
	 * @return List
	 * @throws DataAccessException
	 */
	@SuppressWarnings("rawtypes")
	public List getPolyList(BrbMap<Object, Object> bMap)
			throws DataAccessException {
		return queryS.selectList("poly.getPolyList", bMap);
	}

	/**
	 *
	 * @param
	 * @return List
	 * @throws DataAccessException
	 */
	@SuppressWarnings("rawtypes")
	public List getPoly()
			throws DataAccessException {
		return queryS.selectList("poly.getPoly");
	}

	/**
	 *
	 * @param bMap
	 * @return Integer
	 * @throws DataAccessException
	 */
	public Integer getPolyTotal(BrbMap<Object, Object> bMap)
			throws DataAccessException {
		return (Integer)queryS.selectOne("poly.getPolyTotal", bMap);
	}

	/**
	 *
	 * @param MemVo
	 * @return BrbMap
	 * @throws DataAccessException
	 */
	@SuppressWarnings("unchecked")
	public BrbMap<Object, Object> getPolyDet(String polySq)
			throws DataAccessException {
		return (BrbMap<Object, Object>)queryS.selectOne("poly.getPolyDet", polySq);
	}

	/**
	 *
	 * @param MemVo
	 * @return
	 * @throws DataAccessException
	 */
	public void updatePoly(PolyVo pvo)
			throws DataAccessException {
		queryM.update("poly.updatePoly", pvo);
	}

	/**
	 *
	 * @param MemVo
	 * @return
	 * @throws DataAccessException
	 */
	public void insertPoly(PolyVo pvo)
			throws DataAccessException {
		queryM.insert("poly.insertPoly", pvo);
	}
}

package com.brb.brbcom.common;



import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
import org.springframework.web.util.WebUtils;


/**
 * 
 * @author back
 *
 */
@Service("securityInterceptor")
@Repository
@Scope("request")
public class SecurityInterceptor extends HandlerInterceptorAdapter {
	Logger logger = LoggerFactory.getLogger(this.getClass());

	/**
	 * 
	 */
	@Override
	public boolean preHandle(HttpServletRequest request,HttpServletResponse response, Object handler) throws Exception {
		
		
		System.out.println("[KENU]####################### preHandle start====>"  );
		System.out.println("##########################################################################");
		System.out.println("This is Session Interceptor Area!!!!!");
		System.out.println("request.getRequestURI====>" + request.getRequestURI());
		System.out.println("request.getContextPath====>" + request.getContextPath());
		System.out.println("request.getLocalAddr====>" + request.getLocalAddr());
		System.out.println("request.getRemoteAddr====>" + request.getRemoteAddr());
		System.out.println("request.getHeader(User-Agent)====>" + request.getHeader("User-Agent"));		
		System.out.println("request.getHeader(WL-Proxy_Client-IP)====>" + request.getHeader("WL-Proxy_Client-IP"));
		System.out.println("request.getHeader(Proxy_Client-IP)====>" + request.getHeader("Proxy_Client-IP"));
		System.out.println("request.getHeader(User-Agent)====>" + request.getHeader("X-Forwarded-For"));
		System.out.println("request.getScheme()====>" + request.getScheme());
		System.out.println("request.getHeaderNames()====>" + request.getHeaderNames());
		System.out.println("request.getHeaderNames(ns_client_ip)====>" + request.getHeader("ns_client_ip"));
		System.out.println("request.getHeaderNames(Proxy-Client-IP)====>" + request.getHeader("Proxy-Client-IP"));
		System.out.println("request.getHeaderNames(X-Forwarded-For)====>" + request.getHeader("X-Forwarded-For"));
		System.out.println("request.getHeaderNames(WL-Proxy-Client-IP)====>" + request.getHeader("WL-Proxy-Client-IP"));
	    System.out.println("###################### request.getRemoteAddr() ===> " + request.getRemoteAddr());
		String clientIp 		= request.getHeader("ns_client_ip");
		logger.debug("ClientIP[ns_client_ip] ======================>" + clientIp);
		if ( clientIp == null || clientIp.equals("") )  {
			clientIp 		= request.getHeader("Proxy-Client-IP");
			logger.debug("ClientIP[Proxy-Client-IP] ======================>" + clientIp);
			if ( clientIp == null || clientIp.equals("") )  {
				clientIp = request.getRemoteAddr();
				logger.debug("ClientIP[getRemoteAddr] ======================>" + clientIp);
			}
		}

		return super.preHandle(request, response, handler);
	}
	
	
	/**
	 * 
	 * @param request
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	protected String getRequestParameters(HttpServletRequest request) throws UnsupportedEncodingException {
        StringBuffer buf = new StringBuffer();
        Map<?, ?> params = WebUtils.getParametersStartingWith(request, null);
        if (params == null) {
        	params = new HashMap<String, String>();
        }
        
        Iterator<?> it = params.keySet().iterator();
        while(it.hasNext()) {
        	String key = (String)it.next();
        	
        	if (buf.length() > 0) {buf.append("&");}
        	
        	buf.append(key).append("=").append(URLEncoder.encode((String)params.get(key),"utf-8"));
        }
        
        return buf.toString();
	}
	
}

package com.brb.brbcom.common;



import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.URLEncoder;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
import org.springframework.web.util.WebUtils;

import com.brb.brbcom.common.collections.BrbMap;
import com.brb.brbcom.common.util.Util;
import com.brb.common.service.CommonService;


/**
 * 
 * @author back
 *
 */
@Service("securityInterceptor")
@Repository
@Scope("request")
public class SecurityInterceptor extends HandlerInterceptorAdapter {
	Logger logger = LoggerFactory.getLogger(this.getClass());

	@Autowired
	CommonService commonService;
	
	/**
	 * 
	 */
	@Override
	public boolean preHandle(HttpServletRequest request,HttpServletResponse response, Object handler) throws Exception {
		
		HttpSession session = request.getSession(false);

		if((!"/".equals(request.getRequestURI()) && !"/login/login".equals(request.getRequestURI()))
				&& null == session) {
			response.sendRedirect(request.getContextPath()+"/");
			return false;
		}
		
		if((!"/".equals(request.getRequestURI()) && !"/login/login".equals(request.getRequestURI()) && !"/login/passSend".equals(request.getRequestURI())) 
				&& null == session.getAttribute("ADM_EMAIL")) {
			response.sendRedirect(request.getContextPath()+"/");
			return false;
		}
	
		if("/".equals(request.getRequestURI())  && null != session){
			 session.invalidate();
			 session = null;
		}
	
		logger.debug("##########################################################################");
		logger.debug("This is Session Interceptor Area!!!!!");
		logger.debug("# request.getRequestURI====>" + request.getRequestURI());
		logger.debug("# request.getContextPath====>" + request.getContextPath());
		logger.debug("# request.getLocalAddr====>" + request.getLocalAddr());
		logger.debug("# request.getRemoteAddr====>" + request.getRemoteAddr());
		logger.debug("# request.getHeader(User-Agent)====>" + request.getHeader("User-Agent"));		
		logger.debug("# request.getHeader(WL-Proxy_Client-IP)====>" + request.getHeader("WL-Proxy_Client-IP"));
		logger.debug("# request.getHeader(Proxy_Client-IP)====>" + request.getHeader("Proxy_Client-IP"));
		logger.debug("# request.getHeader(User-Agent)====>" + request.getHeader("X-Forwarded-For"));
		logger.debug("# request.getScheme()====>" + request.getScheme());
		logger.debug("# request.getHeaderNames()====>" + request.getHeaderNames());
		logger.debug("# request.getHeaderNames(ns_client_ip)====>" + request.getHeader("ns_client_ip"));
		logger.debug("# request.getHeaderNames(Proxy-Client-IP)====>" + request.getHeader("Proxy-Client-IP"));
		logger.debug("# request.getHeaderNames(X-Forwarded-For)====>" + request.getHeader("X-Forwarded-For"));
		logger.debug("# request.getHeaderNames(WL-Proxy-Client-IP)====>" + request.getHeader("WL-Proxy-Client-IP"));
	    logger.debug("# request.getRemoteAddr() ===> " + request.getRemoteAddr());
	    logger.debug("# request.getHeader(REFERER) ===> " + request.getHeader("REFERER"));
		String clientIp 		= request.getHeader("ns_client_ip");

	  
	    
		logger.debug("# ClientIP[ns_client_ip] ======================>" + clientIp);
		if ( clientIp == null || clientIp.equals("") )  {
			clientIp 		= request.getHeader("Proxy-Client-IP");
			logger.debug("# ClientIP[Proxy-Client-IP] ======================>" + clientIp);
			if ( clientIp == null || clientIp.equals("") )  {
				clientIp = request.getRemoteAddr();
				logger.debug("# ClientIP[getRemoteAddr] ======================>" + clientIp);
			}
		}
		
		
	    if(null != session && null != session.getAttribute("ADM_EMAIL")){
	    	try{
		    	String url = request.getScheme () + "://" + request.getServerName () + ":" + request.getServerPort ()+request.getRequestURI();
		    	session.setAttribute("OSNAME", System.getProperty("os.name").toLowerCase(Locale.ROOT));
		    	session.setAttribute("USERAGENT", Util.getBrowser(request));
		    	session.setAttribute("LOCALIP", Util.getLocalServerIp());
		    	session.setAttribute("LOCALURL", url);
		    	session.setAttribute("REFERER", request.getHeader("REFERER"));
		    	
		    	logger.debug("# session.getAttribute(OSNAME====>" + session.getAttribute("OSNAME"));
				logger.debug("# session.getAttribute(USERAGENT====>" + session.getAttribute("USERAGENT"));
				logger.debug("# session.getAttribute(LOCALIP====>" + session.getAttribute("LOCALIP"));
				logger.debug("# session.getAttribute(LOCALURL====>" + session.getAttribute("LOCALURL"));
				logger.debug("# session.getAttribute(REFERER====>" + session.getAttribute("REFERER"));
				logger.debug("# session.getAttribute(ADM_EMAIL====>" + session.getAttribute("ADM_EMAIL"));
				logger.debug("# session.getAttribute(USERCHECK====>" + session.getAttribute("USERCHECK"));
				logger.debug("# session.getAttribute(ADM_NM====>" + session.getAttribute("ADM_NM"));
				logger.debug("# session.getAttribute(ADM_SQ====>" + session.getAttribute("ADM_SQ"));
				logger.debug("# session.getAttribute(ADM_HP====>" + session.getAttribute("ADM_HP"));
				
//				if(!"/".equals(request.getRequestURI())){
//					BrbMap<Object, Object> logActMap = new BrbMap<>();
//					logActMap.put("R_ADM_EMAIL", session.getAttribute("ADM_EMAIL"));
//					logActMap.put("R_CON_ENV",session.getAttribute("OSNAME")+" : "+ Util.getBrowser(request));
//					logActMap.put("R_IP", Util.getLocalServerIp());
//					logActMap.put("R_CUR_URL", url);
//					logActMap.put("R_PATH", request.getRequestURI());
//					logActMap.put("R_REFFER", null == request.getHeader("REFERER") ? "" : request.getHeader("REFERER") );  	
//					commonService.addAdminActLog(logActMap);
//				}
	    	}catch(Exception e){
	    		e.printStackTrace();
			}
	    }
	    logger.debug("##########################################################################");
		return super.preHandle(request, response, handler);
	}
	
	
	/**
	 * 
	 * @param request
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	protected String getRequestParameters(HttpServletRequest request) throws UnsupportedEncodingException {
        StringBuffer buf = new StringBuffer();
        Map<?, ?> params = WebUtils.getParametersStartingWith(request, null);
        if (params == null) {
        	params = new HashMap<String, String>();
        }
        
        Iterator<?> it = params.keySet().iterator();
        while(it.hasNext()) {
        	String key = (String)it.next();
        	
        	if (buf.length() > 0) {buf.append("&");}
        	
        	buf.append(key).append("=").append(URLEncoder.encode((String)params.get(key),"utf-8"));
        }
        
        return buf.toString();
	}
	
	
}
